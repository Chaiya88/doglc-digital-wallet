/**
 * ü§ñ DOGLC DIGITAL WALLET - MAIN BOT
 * Enhanced with multi-language support and full features
 */

import 'dotenv/config';
import { getMessages, detectUserLanguage, formatMessage, getLanguageDisplay } from './locales/index.js';
import { WalletManager, formatCurrency, convertCurrency } from './utils/wallet.js';

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    
    // Initialize Wallet Manager
    const walletManager = new WalletManager(env);
    
    // Health check
    if (request.method === 'GET') {
      return Response.json({
        status: 'ok',
        service: 'doglc-digital-wallet',
        version: '3.0-full-features',
        features: [
          'multi_language_support',
          'wallet_management', 
          'deposit_withdrawal',
          'money_transfer',
          'security_system',
          'analytics_monitoring'
        ],
        supported_languages: ['th', 'en', 'zh', 'km', 'ko', 'id'],
        timestamp: new Date().toISOString(),
        uptime: Date.now()
      });
    }
    
    // Handle webhook
    if (request.method === 'POST') {
      try {
        const update = await request.json();
        
        // Initialize Telegraf bot
        const { Telegraf } = await import('telegraf');
        const bot = new Telegraf(env.TELEGRAM_BOT_TOKEN || env.BOT_TOKEN);
        
        // === MIDDLEWARE SETUP ===
        bot.use(async (ctx, next) => {
          try {
            // User session data
            ctx.userId = ctx.from?.id;
            ctx.chatId = ctx.chat?.id;
            
            // Check for saved user language preference first
            let userLang = 'en'; // Default to English
            
            if (ctx.userId && env.USER_SESSIONS) {
              try {
                const userSession = await env.USER_SESSIONS.get(`lang_${ctx.userId}`);
                if (userSession) {
                  userLang = userSession;
                }
              } catch (error) {
                console.log('Could not load user language preference:', error);
                // Fall back to default English
              }
            }
            
            ctx.userLanguage = userLang;
            ctx.messages = getMessages(userLang);
            
            // Add wallet manager to context
            ctx.wallet = walletManager;
            
            // Rate limiting check (basic)
            const rateLimitKey = `rate_${ctx.userId}`;
            const now = Date.now();
            
            await next();
            
          } catch (error) {
            console.error('Middleware error:', error);
            const messages = getMessages('en'); // Always use English for errors
            await ctx.reply(messages.errorOccurred);
          }
        });
        
        // === START COMMAND ===
        bot.start(async (ctx) => {
          try {
            const messages = ctx.messages;
            
            const keyboard = {
              inline_keyboard: [
                [
                  { text: messages.balanceBtn, callback_data: 'balance' },
                  { text: messages.depositBtn, callback_data: 'deposit' }
                ],
                [
                  { text: messages.withdrawBtn, callback_data: 'withdraw' },
                  { text: messages.sendBtn, callback_data: 'send' }
                ],
                [
                  { text: messages.historyBtn, callback_data: 'history' },
                  { text: messages.languageBtn, callback_data: 'change_language' }
                ],
                [
                  { text: messages.settingsBtn, callback_data: 'settings' },
                  { text: messages.helpBtn, callback_data: 'help' }
                ]
              ]
            };
            
            await ctx.reply(messages.welcome, {
              reply_markup: keyboard,
              parse_mode: 'HTML'
            });
            
          } catch (error) {
            console.error('Start error:', error);
            await ctx.reply(ctx.messages.errorOccurred);
          }
        });
        
        // === CALLBACK HANDLERS ===
        bot.on('callback_query', async (ctx) => {
          try {
            const data = ctx.callbackQuery.data;
            const messages = ctx.messages;
            
            let responseMessage = '';
            let keyboard = {};
            
            switch (data) {
              case 'wallet':
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• wallet ‡∏à‡∏£‡∏¥‡∏á
                let userWallet = await ctx.wallet.getWallet(ctx.userId);
                
                if (!userWallet) {
                  // ‡∏™‡∏£‡πâ‡∏≤‡∏á wallet ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                  userWallet = await ctx.wallet.createWallet(ctx.userId, {
                    firstName: ctx.from.first_name,
                    username: ctx.from.username
                  });
                }
                
                responseMessage = ctx.messages.walletDetails
                  .replace('{thbBalance}', formatCurrency(userWallet.balances.THB, 'THB'))
                  .replace('{usdtBalance}', formatCurrency(userWallet.balances.USDT, 'USDT'))
                  .replace('{totalTransactions}', userWallet.statistics.totalTransactions)
                  .replace('{totalDeposits}', formatCurrency(userWallet.statistics.totalDeposits, 'THB'))
                  .replace('{address}', userWallet.address)
                  .replace('{updatedAt}', new Date(userWallet.updatedAt).toLocaleString('en-US'));
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: ctx.messages.depositBtn, callback_data: 'deposit' },
                      { text: ctx.messages.withdrawBtn, callback_data: 'withdraw' }
                    ],
                    [
                      { text: ctx.messages.sendBtn, callback_data: 'send' },
                      { text: ctx.messages.historyBtn, callback_data: 'history' }
                    ],
                    [
                      { text: ctx.messages.backToMainBtn, callback_data: 'start' }
                    ]
                  ]
                };
                break;
                
              case 'balance':
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• wallet ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                const walletData = await ctx.wallet.getWallet(ctx.userId);
                
                if (!walletData) {
                  responseMessage = ctx.messages.noWalletBalance;
                } else {
                  const totalValueTHB = walletData.balances.THB + convertCurrency(walletData.balances.USDT, 'USDT', 'THB');
                  const totalValueUSD = convertCurrency(totalValueTHB, 'THB', 'USDT');
                  
                  responseMessage = ctx.messages.balanceDetails
                    .replace('{thbBalance}', formatCurrency(walletData.balances.THB, 'THB'))
                    .replace('{usdtBalance}', formatCurrency(walletData.balances.USDT, 'USDT'))
                    .replace('{totalValueTHB}', formatCurrency(totalValueTHB, 'THB'))
                    .replace('{totalValueUSD}', totalValueUSD.toFixed(2))
                    .replace('{timestamp}', new Date(walletData.updatedAt).toLocaleString('en-US'));
                }
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: ctx.messages.refreshBtn, callback_data: 'balance' },
                      { text: ctx.messages.chartBtn, callback_data: 'chart' }
                    ],
                    [
                      { text: ctx.messages.backBtn, callback_data: 'wallet' }
                    ]
                  ]
                };
                break;
                
              case 'deposit_thb':
                const depositAddressTHB = ctx.wallet.generateDepositAddress(ctx.userId, 'THB');
                
                responseMessage = ctx.messages.depositTHB.replace('{depositAddress}', depositAddressTHB);
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: ctx.messages.demoDeposit100, callback_data: 'demo_deposit_100' },
                      { text: ctx.messages.demoDeposit500, callback_data: 'demo_deposit_500' }
                    ],
                    [
                      { text: ctx.messages.sendSlipBtn, callback_data: 'upload_slip' }
                    ],
                    [
                      { text: ctx.messages.backBtn, callback_data: 'deposit' }
                    ]
                  ]
                };
                break;
                
              case 'deposit_usdt':
                const depositAddressUSDT = ctx.wallet.generateDepositAddress(ctx.userId, 'USDT');
                
                responseMessage = ctx.messages.depositUSDT.replace('{depositAddress}', depositAddressUSDT);
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: ctx.messages.demoDeposit10USDT, callback_data: 'demo_deposit_10_usdt' },
                      { text: ctx.messages.demoDeposit50USDT, callback_data: 'demo_deposit_50_usdt' }
                    ],
                    [
                      { text: ctx.messages.checkDepositStatus, callback_data: 'check_deposit_status' }
                    ],
                    [
                      { text: ctx.messages.backBtn, callback_data: 'deposit' }
                    ]
                  ]
                };
                break;
                
              // Demo deposit handlers
              case 'demo_deposit_100':
                try {
                  await ctx.wallet.updateBalance(ctx.userId, 'THB', 100, 'add');
                  await ctx.wallet.addTransaction(ctx.userId, {
                    type: 'deposit',
                    currency: 'THB',
                    amount: 100,
                    method: 'bank_transfer',
                    description: 'Demo deposit - Bank Transfer',
                    status: 'completed'
                  });
                  
                  responseMessage = `‚úÖ <b>‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>

üí∞ <b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b>
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: 100.00 ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÇ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ (Demo)
‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}

üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß!`;
                  
                  keyboard = {
                    inline_keyboard: [
                      [
                        { text: 'üí∞ ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'balance' },
                        { text: 'üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', callback_data: 'history' }
                      ],
                      [
                        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', callback_data: 'start' }
                      ]
                    ]
                  };
                } catch (error) {
                  responseMessage = `‚ùå <b>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</b>

‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
                  
                  keyboard = {
                    inline_keyboard: [
                      [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'deposit_thb' }]
                    ]
                  };
                }
                break;
                
              case 'demo_deposit_500':
                try {
                  await ctx.wallet.updateBalance(ctx.userId, 'THB', 500, 'add');
                  await ctx.wallet.addTransaction(ctx.userId, {
                    type: 'deposit',
                    currency: 'THB',
                    amount: 500,
                    method: 'bank_transfer',
                    description: 'Demo deposit - Bank Transfer',
                    status: 'completed'
                  });
                  
                  responseMessage = `‚úÖ <b>‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>

üí∞ <b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b>
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: 500.00 ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÇ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ (Demo)
‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}

üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß!`;
                  
                  keyboard = {
                    inline_keyboard: [
                      [
                        { text: 'üí∞ ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'balance' },
                        { text: 'üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', callback_data: 'history' }
                      ],
                      [
                        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', callback_data: 'start' }
                      ]
                    ]
                  };
                } catch (error) {
                  responseMessage = `‚ùå <b>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</b>

‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
                  
                  keyboard = {
                    inline_keyboard: [
                      [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'deposit_thb' }]
                    ]
                  };
                }
                break;
                
              case 'demo_deposit_10_usdt':
                try {
                  await ctx.wallet.updateBalance(ctx.userId, 'USDT', 10, 'add');
                  await ctx.wallet.addTransaction(ctx.userId, {
                    type: 'deposit',
                    currency: 'USDT',
                    amount: 10,
                    method: 'crypto_transfer',
                    description: 'Demo deposit - USDT TRC-20',
                    status: 'completed'
                  });
                  
                  responseMessage = `‚úÖ <b>‡∏ù‡∏≤‡∏Å USDT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>

üî∑ <b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b>
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: 10.00 USDT
‚Ä¢ Network: TRC-20 (Demo)
‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}

üíé ‡∏¢‡∏≠‡∏î USDT ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß!`;
                  
                  keyboard = {
                    inline_keyboard: [
                      [
                        { text: 'üí∞ ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'balance' },
                        { text: 'üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', callback_data: 'history' }
                      ],
                      [
                        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', callback_data: 'start' }
                      ]
                    ]
                  };
                } catch (error) {
                  responseMessage = `‚ùå <b>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</b>

‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
                  
                  keyboard = {
                    inline_keyboard: [
                      [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'deposit_usdt' }]
                    ]
                  };
                }
                break;
                
              case 'withdraw':
                responseMessage = `üì• <b>‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</b>

‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô:

üí∞ <b>THB (‡∏ö‡∏≤‡∏ó):</b>
‚Ä¢ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 100 ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 10 ‡∏ö‡∏≤‡∏ó

üî∑ <b>USDT:</b>
‚Ä¢ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Wallet Address
‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10 USDT
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Network`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üí∞ ‡∏ñ‡∏≠‡∏ô THB', callback_data: 'withdraw_thb' },
                      { text: 'üî∑ ‡∏ñ‡∏≠‡∏ô USDT', callback_data: 'withdraw_usdt' }
                    ],
                    [
                      { text: 'üìã ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', callback_data: 'withdraw_guide' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'wallet' }
                    ]
                  ]
                };
                break;
                
              case 'send':
                responseMessage = `üì® <b>‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô</b>

‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô:

üë• <b>‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô:</b>
‚Ä¢ ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
‚Ä¢ ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

üåê <b>‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:</b>
‚Ä¢ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏∑‡πà‡∏ô
‚Ä¢ ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
‚Ä¢ 5-30 ‡∏ô‡∏≤‡∏ó‡∏µ`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üë• ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô', callback_data: 'send_internal' },
                      { text: 'üåê ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', callback_data: 'send_external' }
                    ],
                    [
                      { text: 'üì± QR Code', callback_data: 'send_qr' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'wallet' }
                    ]
                  ]
                };
                break;
                
              case 'history':
                // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏£‡∏¥‡∏á
                const transactions = await ctx.wallet.getTransactionHistory(ctx.userId, 10);
                const summary = await ctx.wallet.generateSummaryReport(ctx.userId);
                
                if (!summary) {
                  responseMessage = `üìã <b>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</b>

‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô`;
                } else {
                  let transactionList = '';
                  if (transactions.length === 0) {
                    transactionList = '‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°';
                  } else {
                    transactions.slice(0, 5).forEach((tx, index) => {
                      const date = new Date(tx.timestamp).toLocaleDateString('th-TH');
                      const time = new Date(tx.timestamp).toLocaleTimeString('th-TH', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      });
                      transactionList += `‚Ä¢ ${tx.type} ${tx.amount} ${tx.currency} (${date} ${time})\n`;
                    });
                  }
                  
                  responseMessage = `üìã <b>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</b>

üìÖ <b>‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:</b> ${summary.recentActivity.today} ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
üìä <b>‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ:</b> ${summary.recentActivity.thisWeek} ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°  
üìà <b>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:</b> ${summary.recentActivity.thisMonth} ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°

üèÜ <b>‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</b>
${transactionList}

üí° <b>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</b> ${summary.statistics.totalTransactions} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;
                }
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ', callback_data: 'history_summary' },
                      { text: 'üì± ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF', callback_data: 'export_pdf' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'wallet' }
                    ]
                  ]
                };
                break;
                
              case 'change_language':
                responseMessage = `üåê <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ / Select Language</b>

‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üáπüá≠ ‡πÑ‡∏ó‡∏¢', callback_data: 'lang_th' },
                      { text: 'üá∫üá∏ English', callback_data: 'lang_en' }
                    ],
                    [
                      { text: 'üá®üá≥ ‰∏≠Êñá', callback_data: 'lang_zh' },
                      { text: 'üá∞üá≠ ·ûÅ·üí·ûò·üÇ·ûö', callback_data: 'lang_km' }
                    ],
                    [
                      { text: 'üá∞üá∑ ÌïúÍµ≠Ïñ¥', callback_data: 'lang_ko' },
                      { text: 'üáÆüá© Indonesia', callback_data: 'lang_id' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', callback_data: 'main_menu' }
                    ]
                  ]
                };
                break;
                
              case 'settings':
                responseMessage = ctx.messages.settingsMenu;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: ctx.messages.setPinBtn, callback_data: 'set_pin' },
                      { text: ctx.messages.notificationBtn, callback_data: 'notifications' }
                    ],
                    [
                      { text: ctx.messages.languageBtn, callback_data: 'change_language' }
                    ],
                    [
                      { text: ctx.messages.backToMainBtn, callback_data: 'start' }
                    ]
                  ]
                };
                break;
                
              case 'help':
                responseMessage = ctx.messages.helpMenu;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üìã FAQ', callback_data: 'faq' },
                      { text: 'üí¨ Live Chat', callback_data: 'live_chat' }
                    ],
                    [
                      { text: ctx.messages.backToMainBtn, callback_data: 'main_menu' }
                    ]
                  ]
                };
                break;
                
              case 'main_menu':
                // Send main menu message same as /start
                const welcomeMsg = ctx.messages.welcome.replace(/{username}/g, ctx.from?.username || ctx.from?.first_name || 'user');
                responseMessage = welcomeMsg + '\n\n' + ctx.messages.mainMenu;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: ctx.messages.balanceBtn, callback_data: 'balance' },
                      { text: ctx.messages.depositBtn, callback_data: 'deposit' }
                    ],
                    [
                      { text: ctx.messages.withdrawBtn, callback_data: 'withdraw' },
                      { text: ctx.messages.sendBtn, callback_data: 'send' }
                    ],
                    [
                      { text: ctx.messages.historyBtn, callback_data: 'history' },
                      { text: ctx.messages.languageBtn, callback_data: 'change_language' }
                    ],
                    [
                      { text: ctx.messages.settingsBtn, callback_data: 'settings' },
                      { text: ctx.messages.helpBtn, callback_data: 'help' }
                    ]
                  ]
                };
                break;
                
              // Language change handlers
              case 'lang_th':
              case 'lang_en':
              case 'lang_zh':
              case 'lang_km':
              case 'lang_ko':
              case 'lang_id':
                const newLang = data.replace('lang_', '');
                ctx.userLanguage = newLang;
                ctx.messages = getMessages(newLang);
                
                // Save user language preference to KV storage
                if (ctx.userId && env.USER_SESSIONS) {
                  try {
                    await env.USER_SESSIONS.put(`lang_${ctx.userId}`, newLang);
                  } catch (error) {
                    console.log('Could not save user language preference:', error);
                  }
                }
                
                responseMessage = ctx.messages.languageChanged.replace('{language}', getLanguageDisplay(newLang));
                keyboard = {
                  inline_keyboard: [
                    [{ text: ctx.messages.backToMainBtn, callback_data: 'main_menu' }]
                  ]
                };
                break;
                
              // Missing handlers - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö
              case 'withdraw_thb':
                responseMessage = `üí∞ <b>‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô THB</b>

üè¶ <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</b>
‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: 100 ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: 10 ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: 1-24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

üìã <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:</b>
1. ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô
2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
3. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
4. ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üí∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏≠‡∏ô 50 ‡∏ö‡∏≤‡∏ó', callback_data: 'demo_withdraw_50' },
                      { text: 'üí∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏≠‡∏ô 200 ‡∏ö‡∏≤‡∏ó', callback_data: 'demo_withdraw_200' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'withdraw' }
                    ]
                  ]
                };
                break;
                
              case 'withdraw_usdt':
                responseMessage = `üî∑ <b>‡∏ñ‡∏≠‡∏ô USDT</b>

üîó <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</b>
‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: 10 USDT
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: 2 USDT
‚Ä¢ Network: TRC-20 (Tron)
‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: 5-30 ‡∏ô‡∏≤‡∏ó‡∏µ

üìã <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:</b>
1. ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô
2. ‡∏Å‡∏£‡∏≠‡∏Å Wallet Address ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
3. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
4. ‡∏£‡∏≠ Network Confirmation

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üî∑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏≠‡∏ô 5 USDT', callback_data: 'demo_withdraw_5_usdt' },
                      { text: 'üî∑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏≠‡∏ô 20 USDT', callback_data: 'demo_withdraw_20_usdt' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'withdraw' }
                    ]
                  ]
                };
                break;
                
              case 'send_internal':
                responseMessage = `üë• <b>‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô</b>

üí´ <b>‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:</b>
‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
‚Ä¢ ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (Real-time)
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö THB ‡πÅ‡∏•‡∏∞ USDT
‚Ä¢ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ 100%

üìã <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:</b>
1. ‡∏£‡∏∞‡∏ö‡∏∏ User ID ‡∏´‡∏£‡∏∑‡∏≠ Username ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
4. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üí∞ ‡∏™‡πà‡∏á THB', callback_data: 'send_thb_internal' },
                      { text: 'üî∑ ‡∏™‡πà‡∏á USDT', callback_data: 'send_usdt_internal' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'send' }
                    ]
                  ]
                };
                break;
                
              case 'send_external':
                responseMessage = `üåê <b>‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å</b>

üè¶ <b>‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:</b>
‚Ä¢ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ (THB)
‚Ä¢ Crypto Wallet (USDT)
‚Ä¢ ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 5-60 ‡∏ô‡∏≤‡∏ó‡∏µ

üìã <b>‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°:</b>
‚Ä¢ THB: 25 ‡∏ö‡∏≤‡∏ó + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
‚Ä¢ USDT: 3 USDT + Network Fee

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üè¶ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', callback_data: 'send_bank' },
                      { text: 'üî∑ ‡∏™‡πà‡∏á‡πÑ‡∏õ Wallet', callback_data: 'send_crypto' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'send' }
                    ]
                  ]
                };
                break;
                
              case 'qr_code':
              case 'send_qr':
                responseMessage = `üì± <b>QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</b>

üéØ <b>‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code:</b>
‚Ä¢ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô
‚Ä¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
‚Ä¢ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™

üìã <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:</b>
1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô (THB/USDT)
2. ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
3. ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
4. ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üí∞ QR ‡∏£‡∏±‡∏ö THB', callback_data: 'qr_thb' },
                      { text: 'üî∑ QR ‡∏£‡∏±‡∏ö USDT', callback_data: 'qr_usdt' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'send' }
                    ]
                  ]
                };
                break;
                
              case 'payment_link':
                responseMessage = `üîó <b>Payment Link</b>

üåê <b>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô:</b>
‚Ä¢ ‡πÅ‡∏ä‡∏£‡πå‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏≤‡∏á Social Media
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏î‡πâ

üìã <b>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:</b>
‚Ä¢ ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏ô Telegram, Line, Facebook
‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡πà‡∏≤‡∏¢
‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Real-time

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
                
                keyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå THB', callback_data: 'link_thb' },
                      { text: 'üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå USDT', callback_data: 'link_usdt' }
                    ],
                    [
                      { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'send' }
                    ]
                  ]
                };
                break;
                
              // Back to start
              case 'start':
                const startKeyboard = {
                  inline_keyboard: [
                    [
                      { text: 'üí≥ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'wallet' },
                      { text: 'üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'balance' }
                    ],
                    [
                      { text: 'üì§ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'deposit' },
                      { text: 'üì• ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'withdraw' }
                    ],
                    [
                      { text: 'üì® ‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'send' },
                      { text: 'üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', callback_data: 'history' }
                    ],
                    [
                      { text: 'üåê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤', callback_data: 'change_language' },
                      { text: '‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', callback_data: 'settings' }
                    ],
                    [
                      { text: 'üìû ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', callback_data: 'help' }
                    ]
                  ]
                };
                
                responseMessage = messages.welcome;
                keyboard = startKeyboard;
                break;
                
              // Additional missing handlers
              case 'deposit_guide':
                responseMessage = `üìã <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô</b>

üè¶ <b>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö THB:</b>
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏á‡∏Å‡∏¥‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠ Internet Banking
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‚Ä¢ ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
‚Ä¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5-30 ‡∏ô‡∏≤‡∏ó‡∏µ

üî∑ <b>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö USDT:</b>
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Network ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Address ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‚Ä¢ ‡∏£‡∏≠ Network Confirmation
‚Ä¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

‚ö†Ô∏è <b>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:</b>
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏≠‡∏ô
‚Ä¢ ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
‚Ä¢ ‡∏≠‡∏¢‡πà‡∏≤‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡∏∑‡πà‡∏ô`;
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'deposit' }]
                  ]
                };
                break;
                
              case 'withdraw_guide':
                responseMessage = `üìã <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</b>

üí∞ <b>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö THB:</b>
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
‚Ä¢ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PIN ‡∏´‡∏£‡∏∑‡∏≠ OTP
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• 1-24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 10 ‡∏ö‡∏≤‡∏ó

üî∑ <b>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö USDT:</b>
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Wallet Address
‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Network ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• 5-60 ‡∏ô‡∏≤‡∏ó‡∏µ
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° Network Fee

üîí <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:</b>
‚Ä¢ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á Email/SMS`;
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'withdraw' }]
                  ]
                };
                break;
                
              case 'chart':
                responseMessage = `üìä <b>‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</b>

üìà <b>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</b>
‚Ä¢ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
‚Ä¢ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å-‡∏ñ‡∏≠‡∏ô
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

üìã <b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b>
‚Ä¢ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á ‡πÅ‡∏•‡∏∞ Line Chart
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 30-90 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
‚Ä¢ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF ‡πÑ‡∏î‡πâ

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤
üì± ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö Interactive ‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ`;
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'balance' }]
                  ]
                };
                break;
                
              case 'history_summary':
                const summaryReport = await ctx.wallet.generateSummaryReport(ctx.userId);
                
                if (!summaryReport) {
                  responseMessage = `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`;
                } else {
                  responseMessage = `üìä <b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ</b>

üí∞ <b>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</b>
‚Ä¢ THB: ${formatCurrency(summaryReport.balances.THB, 'THB')}
‚Ä¢ USDT: ${formatCurrency(summaryReport.balances.USDT, 'USDT')}

üìà <b>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:</b>
‚Ä¢ ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${summaryReport.statistics.totalTransactions} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏™‡∏∞‡∏™‡∏°: ${formatCurrency(summaryReport.statistics.totalDeposits, 'THB')}
‚Ä¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏≠‡∏ô‡∏™‡∏∞‡∏™‡∏°: ${formatCurrency(summaryReport.statistics.totalWithdrawals, 'THB')}

üìÖ <b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</b>
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${summaryReport.recentActivity.today} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ: ${summaryReport.recentActivity.thisWeek} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚Ä¢ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ${summaryReport.recentActivity.thisMonth} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

‚è∞ <b>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</b> ${new Date(summaryReport.lastUpdate).toLocaleString('th-TH')}`;
                }
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'history' }]
                  ]
                };
                break;
                
              case 'export_pdf':
                responseMessage = `üì± <b>‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF</b>

üìã <b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ:</b>
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ
‚Ä¢ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô

üìß <b>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á:</b>
‚Ä¢ ‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á Email
‚Ä¢ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡πà‡∏≤‡∏ô Link
‚Ä¢ ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏ô Telegram

üöß <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤
üìÑ ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ`;
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'history' }]
                  ]
                };
                break;
                
              case 'faq':
                responseMessage = `‚ùì <b>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ (FAQ)</b>

üîë <b>Q: ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á?</b>
A: ‡∏Å‡∏î /start ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

üí∞ <b>Q: ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?</b>
A: THB ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 50 ‡∏ö‡∏≤‡∏ó, USDT ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10 USDT

üîí <b>Q: ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?</b>
A: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á

‚è∞ <b>Q: ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÑ‡∏´‡∏°?</b>
A: THB 5-30 ‡∏ô‡∏≤‡∏ó‡∏µ, USDT 5-60 ‡∏ô‡∏≤‡∏ó‡∏µ

üìû <b>Q: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô?</b>
A: @DoglcSupport ‡∏´‡∏£‡∏∑‡∏≠ support@doglc.com`;
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'help' }]
                  ]
                };
                break;
                
              case 'live_chat':
                responseMessage = `üí¨ <b>‡πÅ‡∏ä‡∏ó‡∏™‡∏î‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô</b>

üë®‚Äçüíª <b>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</b>
‚Ä¢ Telegram: @DoglcSupport
‚Ä¢ Line: @doglc-support
‚Ä¢ Facebook: DOGLC Digital Wallet
‚Ä¢ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: support@doglc.com

‚è∞ <b>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£:</b>
‚Ä¢ ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå: 8:00-22:00 ‡∏ô.
‚Ä¢ ‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå: 9:00-18:00 ‡∏ô.

üöÄ <b>‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß:</b>
‚Ä¢ Telegram: ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
‚Ä¢ Line: ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
‚Ä¢ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

üí° <b>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</b> ‡∏£‡∏∞‡∏ö‡∏∏ User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß`;
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö', callback_data: 'help' }]
                  ]
                };
                break;
                
              default:
                responseMessage = `ü§ñ <b>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå "${data}" ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤</b>

üîß ‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
‚è∞ ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö! üôè`;
                
                keyboard = {
                  inline_keyboard: [
                    [{ text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å', callback_data: 'start' }]
                  ]
                };
            }
            
            await ctx.editMessageText(responseMessage, {
              reply_markup: keyboard,
              parse_mode: 'HTML'
            });
            
            await ctx.answerCbQuery();
            
          } catch (error) {
            console.error('Callback error:', error);
            try {
              await ctx.answerCbQuery('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
            } catch (cbError) {
              console.error('Failed to answer callback:', cbError);
            }
          }
        });
        
        // === MESSAGE HANDLERS ===
        bot.on('message', async (ctx) => {
          try {
            if (ctx.message?.text?.startsWith('/')) {
              await ctx.reply('ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ /start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
            } else {
              // Handle regular messages (potentially for amount input, etc.)
              await ctx.reply('üí¨ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô /start');
            }
          } catch (error) {
            console.error('Message error:', error);
          }
        });
        
        // Process the update
        await bot.handleUpdate(update);
        
        return new Response('OK', {
          status: 200,
          headers: { 'Content-Type': 'text/plain' }
        });
        
      } catch (error) {
        console.error('Webhook error:', error);
        return new Response('Error', { status: 500 });
      }
    }
    
    return new Response('Method not allowed', { status: 405 });
  }
};
