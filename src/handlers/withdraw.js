/**
 * Withdraw command handlers for USDT and THB withdrawals
 */

import { formatCurrency, formatDateTime, logUserActivity } from '../utils/helpers.js';

export async function handleWithdraw(ctx, withdrawType = 'usdt') {
  try {
    const messages = ctx.messages;
    const userId = ctx.from.id.toString();
    const userLang = ctx.userLanguage;

    await logUserActivity(userId, {
      action: 'withdraw_access',
      withdraw_type: withdrawType,
      language: userLang
    }, ctx.env || {});

    if (withdrawType === 'usdt') {
      return await handleWithdrawUSDT(ctx);
    } else if (withdrawType === 'thb') {
      return await handleWithdrawTHB(ctx);
    } else {
      return await handleWithdrawMenu(ctx);
    }

  } catch (error) {
    console.error('Withdraw handler error:', error);
    await ctx.reply(ctx.messages.errorOccurred);
  }
}

/**
 * USDT Withdrawal to external wallet
 */
async function handleWithdrawUSDT(ctx) {
  const messages = ctx.messages;
  
  // Mock user balance
  const userBalance = {
    usdt: 42.35,
    vip_level: 'BRONZE',
    daily_withdraw_used: 100.00,
    daily_withdraw_limit: 5000.00
  };

  const withdrawMessage = `
üèß <b>‡∏ñ‡∏≠‡∏ô USDT ‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏ö‡∏≤‡∏ó</b>

üíé <b>‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</b> ${userBalance.usdt.toFixed(2)} USDT (‚âà ${(userBalance.usdt * 36.50).toFixed(2)} THB)

üîÑ <b>‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≠‡∏ô:</b>
‚Ä¢ ‡∏ñ‡∏≠‡∏ô USDT ‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Wallet ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö TRON Network (TRC-20)

ÔøΩ <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô:</b>
‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: 10 USDT
‚Ä¢ ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: ${userBalance.daily_withdraw_limit} USDT
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${userBalance.daily_withdraw_used} USDT
‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${(userBalance.daily_withdraw_limit - userBalance.daily_withdraw_used).toFixed(2)} USDT

üèÜ <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ VIP:</b> ${userBalance.vip_level}
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: ${userBalance.vip_level === 'BRONZE' ? '1.5%' : '1.0%'}
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
üîó <b>Network:</b> TRON (TRC20)
üí∏ <b>‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°:</b> 2 USDT

‚ö†Ô∏è <b>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</b>
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Address ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ TRON Network
‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô / Create Withdrawal', callback_data: 'create_usdt_withdrawal' }
      ],
      [
        { text: 'üîÑ ‡∏î‡∏π‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô / Exchange Rate', callback_data: 'view_exchange_rate' }
      ],
      [
        { text: 'üìã Address Book', callback_data: 'usdt_address_book' }
      ],
      [
        { text: 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô / Withdrawal History', callback_data: 'usdt_withdraw_history' }
      ],
      [
        { text: 'üéñÔ∏è ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î VIP / Upgrade VIP', callback_data: 'vip_upgrade' }
      ],
      [
        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ñ‡∏≠‡∏ô / Back to Withdraw', callback_data: 'withdraw_menu' }
      ]
    ]
  };

  await ctx.reply(withdrawMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

/**
 * THB Withdrawal to bank account
 */
async function handleWithdrawTHB(ctx) {
  const messages = ctx.messages;
  
  const userBalance = {
    thb: 1234.56,
    vip_level: 'BRONZE',
    daily_withdraw_used: 0,
    daily_withdraw_limit: 50000.00
  };

  const withdrawMessage = `
üèß <b>‡∏ñ‡∏≠‡∏ô THB / THB Withdrawal</b>

üíµ <b>‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</b> ${formatCurrency(userBalance.thb, 'th')} ‡∏ö‡∏≤‡∏ó

üè¶ <b>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô:</b>
‚Ä¢ ‡πÇ‡∏≠‡∏ô‡πÑ‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡πà‡∏á
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå

üí∞ <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:</b> 500 ‡∏ö‡∏≤‡∏ó
üí∞ <b>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</b> 50,000 ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô
üí∏ <b>‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°:</b> 25 ‡∏ö‡∏≤‡∏ó

üìä <b>‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:</b>
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${formatCurrency(userBalance.daily_withdraw_used, 'th')} ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${formatCurrency(userBalance.daily_withdraw_limit - userBalance.daily_withdraw_used, 'th')} ‡∏ö‡∏≤‡∏ó

‚è±Ô∏è <b>‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:</b>
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå: 1-4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
‚Ä¢ ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå: ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

üîí <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:</b>
‚Ä¢ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô 2FA
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô / Create Withdrawal', callback_data: 'create_thb_withdrawal' }
      ],
      [
        { text: 'üè¶ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ / Bank Accounts', callback_data: 'thb_bank_accounts' }
      ],
      [
        { text: 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô / Withdrawal History', callback_data: 'thb_withdraw_history' }
      ],
      [
        { text: '‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 2FA / Setup 2FA', callback_data: 'setup_2fa' }
      ],
      [
        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ñ‡∏≠‡∏ô / Back to Withdraw', callback_data: 'withdraw_menu' }
      ]
    ]
  };

  await ctx.reply(withdrawMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

/**
 * Main withdrawal menu
 */
async function handleWithdrawMenu(ctx) {
  const messages = ctx.messages;
  
  const withdrawMenuMessage = `
üèß <b>‡πÄ‡∏°‡∏ô‡∏π‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô / Withdrawal Menu</b>

üíé <b>‡∏ñ‡∏≠‡∏ô USDT:</b>
‚Ä¢ ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á External Wallet
‚Ä¢ ‡πÉ‡∏ä‡πâ TRON Network (TRC20)
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

üíµ <b>‡∏ñ‡∏≠‡∏ô THB:</b>
‚Ä¢ ‡πÇ‡∏≠‡∏ô‡πÑ‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡πà‡∏á
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£

üìä <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</b>
‚Ä¢ ‡∏ñ‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: USDT 10 / THB 500
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: 24/7 (USDT), ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ (THB)
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üíé ‡∏ñ‡∏≠‡∏ô USDT / Withdraw USDT', callback_data: 'withdraw_usdt' }
      ],
      [
        { text: 'üíµ ‡∏ñ‡∏≠‡∏ô THB / Withdraw THB', callback_data: 'withdraw_thb' }
      ],
      [
        { text: 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô / Withdrawal History', callback_data: 'withdraw_history_all' }
      ],
      [
        { text: '‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô / Withdrawal Settings', callback_data: 'withdraw_settings' }
      ],
      [
        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö / Back', callback_data: 'wallet' }
      ]
    ]
  };

  await ctx.reply(withdrawMenuMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

/**
 * Handle USDT withdrawal creation
 */
export async function handleCreateUSDTWithdrawal(ctx) {
  const messages = ctx.messages;
  
  const createMessage = `
üìù <b>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô USDT / Create USDT Withdrawal</b>

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö:

1Ô∏è‚É£ <b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô</b>
   ‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: 10 USDT
   ‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: 2 USDT
   ‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 50)

üìã <b>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</b> <code>50</code>

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô:
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üíé ‡∏ñ‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î / Withdraw All', callback_data: 'withdraw_usdt_all' }
      ],
      [
        { text: 'üîô ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å / Cancel', callback_data: 'withdraw_usdt' }
      ]
    ]
  };

  // Set user state to expect withdrawal amount
  await setUserState(ctx.from.id, 'waiting_usdt_amount');

  await ctx.reply(createMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

// Helper function to set user state (simplified)
async function setUserState(userId, state) {
  // In production, this would use KV storage
  global.userStates = global.userStates || {};
  global.userStates[userId] = state;
}