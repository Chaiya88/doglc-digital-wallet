/**
 * Enhanced wallet command handler with banking operations
 *     const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí∞ ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô / Check Balance', callback_data: 'balance' },
          { text: 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ / History', callback_data: 'history' }
        ],
        [
          { text: 'üíµ ‡∏ù‡∏≤‡∏Å THB / Deposit THB', callback_data: 'deposit_thb' },
          { text: 'üíé ‡∏ñ‡∏≠‡∏ô USDT / Withdraw USDT', callback_data: 'withdraw_usdt' }
        ],
        [
          { text: 'üîÑ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô / Exchange Rate', callback_data: 'view_exchange_rate' },
          { text: 'üí± ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì / Calculator', callback_data: 'calculate_conversion' }
        ],
        [
          { text: 'üéñÔ∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö VIP / VIP Status', callback_data: 'vip_status' },osits, USDT withdrawals, and slip verification
 */

import { formatCurrency, formatDateTime, logUserActivity, getUserState } from '../utils/helpers.js';
import { convertUSDTtoTHB, getExchangeRateDisplay } from '../utils/exchangeRate.js';

export async function handleWallet(ctx, action = null) {
  try {
    const messages = ctx.messages; // Set by middleware
    const userId = ctx.from.id.toString();
    const userLang = ctx.userLanguage;

    // Log wallet access
    await logUserActivity(userId, {
      action: 'wallet_access',
      specific_action: action || 'main_menu',
      language: userLang
    }, ctx.env || {});

    // Handle specific wallet actions
    if (action === 'balance') {
      return await handleBalance(ctx);
    } else if (action === 'deposit') {
      return await handleDepositMenu(ctx);
    } else if (action === 'withdraw') {
      return await handleWithdrawMenu(ctx);
    }

    // Main wallet menu with enhanced features
    const mockWallet = {
      address: 'DG' + Math.random().toString(16).substr(2, 40),
      usdt_balance: 142.35,
      last_deposit_thb: 5000,
      last_deposit_date: new Date('2025-09-19'),
      total_deposited_thb: 25000,
      vip_level: 'SILVER',
      created: new Date('2025-08-15')
    };

    // Calculate THB equivalent for USDT balance
    const conversion = convertUSDTtoTHB(mockWallet.usdt_balance);

    const walletMessage = `
üí≥ <b>‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô DOGLC Wallet</b>

üë§ <b>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á:</b> ${ctx.from.first_name}
üè¶ <b>Address:</b> <code>${mockWallet.address}</code>

üí∞ <b>‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</b>
‚Ä¢ USDT: ${mockWallet.usdt_balance.toFixed(2)} USDT
‚Ä¢ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: ~${conversion.thb.toLocaleString()} ‡∏ö‡∏≤‡∏ó

üìä <b>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</b>
‚Ä¢ ‡∏ù‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${mockWallet.last_deposit_thb.toLocaleString()} THB
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ù‡∏≤‡∏Å: ${mockWallet.last_deposit_date.toLocaleDateString('th-TH')}
‚Ä¢ ‡∏ù‡∏≤‡∏Å‡∏£‡∏ß‡∏°: ${mockWallet.total_deposited_thb.toLocaleString()} THB

ÔøΩ <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ VIP:</b> ${mockWallet.vip_level}
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ñ‡∏≠‡∏ô‡∏•‡∏î‡∏•‡∏á
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
‚Ä¢ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤

ÔøΩ <b>‡∏£‡∏∞‡∏ö‡∏ö:</b> ‡∏ù‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó ‚Üí ‡πÑ‡∏î‡πâ USDT ‚Üí ‡∏ñ‡∏≠‡∏ô USDT
üìÖ <b>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà:</b> ${mockWallet.created.toLocaleDateString('th-TH')}
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí∞ ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô / Balance', callback_data: 'balance' },
          { text: 'ÔøΩ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ / History', callback_data: 'history' }
        ],
        [
          { text: 'ÔøΩ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô THB / Deposit', callback_data: 'deposit_thb' },
          { text: 'üèß ‡∏ñ‡∏≠‡∏ô USDT / Withdraw', callback_data: 'withdraw_usdt' }
        ],
        [
          { text: 'üîÑ ‡πÇ‡∏≠‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô / Transfer', callback_data: 'internal_transfer' },
          { text: 'ÔøΩ ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô / Exchange', callback_data: 'exchange' }
        ],
        [
          { text: 'üéñÔ∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö VIP / VIP Status', callback_data: 'vip_status' },
          { text: 'üîê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ / Security', callback_data: 'security_settings' }
        ],
        [
          { text: 'üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å / Home', callback_data: 'start' }
        ]
      ]
    };

    await ctx.reply(walletMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Wallet handler error:', error);
    await ctx.reply(ctx.messages.errorOccurred);
  }
}

/**
 * Handle balance inquiry with enhanced details
 */
async function handleBalance(ctx) {
  const messages = ctx.messages;
  const userId = ctx.from.id.toString();
  const userLang = ctx.userLanguage;

  // Mock balance data - in production, fetch from database
  const balanceData = {
    thb_balance: 1234.56,
    usdt_balance: 42.35,
    doglc_balance: 1000.00,
    total_value_thb: 2580.45,
    daily_limit_used: 500.00,
    daily_limit_total: 50000.00,
    vip_level: 'BRONZE',
    last_transaction: '2 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß'
  };

  const balanceMessage = `
üí∞ <b>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ / Account Balance</b>

üíµ <b>THB:</b> ${formatCurrency(balanceData.thb_balance, userLang)} ‡∏ö‡∏≤‡∏ó
üíé <b>USDT:</b> ${balanceData.usdt_balance.toFixed(2)} USDT
üêï <b>DOGLC:</b> ${balanceData.doglc_balance.toFixed(2)} DOGLC

üìä <b>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏° / Total Value:</b> ${formatCurrency(balanceData.total_value_thb, userLang)} ‡∏ö‡∏≤‡∏ó

üìà <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ / Today's Data:</b>
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß / Used: ${formatCurrency(balanceData.daily_limit_used, userLang)} ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô / Limit: ${formatCurrency(balanceData.daily_limit_total, userLang)} ‡∏ö‡∏≤‡∏ó
‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ / Remaining: ${formatCurrency(balanceData.daily_limit_total - balanceData.daily_limit_used, userLang)} ‡∏ö‡∏≤‡∏ó

üéñÔ∏è <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ VIP:</b> ${balanceData.vip_level}
‚è∞ <b>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</b> ${balanceData.last_transaction}

üí° <b>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</b> ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î VIP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©!
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üì± ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä / Refresh', callback_data: 'balance' },
        { text: 'üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î / Details', callback_data: 'balance_details' }
      ],
      [
        { text: 'üí∏ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô / Deposit', callback_data: 'deposit_thb' },
        { text: 'üèß ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô / Withdraw', callback_data: 'withdraw_usdt' }
      ],
      [
        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö / Back', callback_data: 'wallet' }
      ]
    ]
  };

  await ctx.reply(balanceMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

/**
 * Handle deposit menu with multiple options
 */
async function handleDepositMenu(ctx) {
  const messages = ctx.messages;
  
  const depositMessage = `
üí∏ <b>‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô / Deposit Money</b>

üí≥ <b>‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô THB:</b>
‚Ä¢ ‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö OCR ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ
‚Ä¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5-30 ‡∏ô‡∏≤‡∏ó‡∏µ
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 2% (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10 ‡∏ö‡∏≤‡∏ó)

üíé <b>‡∏ù‡∏≤‡∏Å USDT:</b>
‚Ä¢ ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô TRON Network (TRC20)
‚Ä¢ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô Blockchain
‚Ä¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 10-15 ‡∏ô‡∏≤‡∏ó‡∏µ
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 2 USDT

üéØ <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ - ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</b>
‚Ä¢ THB: 100 - 50,000 ‡∏ö‡∏≤‡∏ó
‚Ä¢ USDT: 10 - 10,000 USDT

üîí ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üíµ ‡∏ù‡∏≤‡∏Å THB / Deposit THB', callback_data: 'deposit_thb' }
      ],
      [
        { text: 'üíé ‡∏ù‡∏≤‡∏Å USDT / Deposit USDT', callback_data: 'deposit_usdt' }
      ],
      [
        { text: 'üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å / Deposit Guide', callback_data: 'deposit_guide' }
      ],
      [
        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö / Back', callback_data: 'wallet' }
      ]
    ]
  };

  await ctx.reply(depositMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

/**
 * Handle withdrawal menu with multiple options
 */
async function handleWithdrawMenu(ctx) {
  const messages = ctx.messages;
  
  const withdrawMessage = `
üèß <b>‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô / Withdraw Money</b>

üíµ <b>‡∏ñ‡∏≠‡∏ô THB:</b>
‚Ä¢ ‡πÇ‡∏≠‡∏ô‡πÑ‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å 15 ‡πÅ‡∏´‡πà‡∏á
‚Ä¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30-60 ‡∏ô‡∏≤‡∏ó‡∏µ
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 25 ‡∏ö‡∏≤‡∏ó/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

üíé <b>‡∏ñ‡∏≠‡∏ô USDT:</b>
‚Ä¢ ‡∏™‡πà‡∏á‡πÑ‡∏õ External Wallet
‚Ä¢ ‡∏ú‡πà‡∏≤‡∏ô TRON Network (TRC20)
‚Ä¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 10-30 ‡∏ô‡∏≤‡∏ó‡∏µ
‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 2 USDT

üéØ <b>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ - ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</b>
‚Ä¢ THB: 500 - 100,000 ‡∏ö‡∏≤‡∏ó
‚Ä¢ USDT: 10 - 50,000 USDT

‚ö†Ô∏è <b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</b> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üíµ ‡∏ñ‡∏≠‡∏ô THB / Withdraw THB', callback_data: 'withdraw_thb' }
      ],
      [
        { text: 'üíé ‡∏ñ‡∏≠‡∏ô USDT / Withdraw USDT', callback_data: 'withdraw_usdt' }
      ],
      [
        { text: 'üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô / Withdraw Guide', callback_data: 'withdraw_guide' }
      ],
      [
        { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö / Back', callback_data: 'wallet' }
      ]
    ]
  };

  await ctx.reply(withdrawMessage, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}