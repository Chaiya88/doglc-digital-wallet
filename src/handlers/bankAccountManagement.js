/**
 * Bank Account Management System for Admin
 * Allows Master Admin to add, suspend, and delete bank accounts
 */

import { logUserActivity } from '../utils/helpers.js';

// Mock bank accounts data - should be stored in database in production
const BANK_ACCOUNTS = [
  {
    id: 'bank_001',
    bank_code: 'KBANK',
    bank_name: '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢',
    account_number: '123-4-56789-0',
    account_name: 'DOGLC DIGITAL WALLET',
    branch: '‡∏™‡∏µ‡∏•‡∏°',
    status: 'ACTIVE',
    daily_limit: 1000000,
    monthly_limit: 30000000,
    current_daily_usage: 245000,
    current_monthly_usage: 5230000,
    created_date: '2025-08-01',
    last_used: '2025-09-20',
    total_received: 125000000,
    transaction_count: 2456
  },
  {
    id: 'bank_002',
    bank_code: 'SCB',
    bank_name: '‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå',
    account_number: '234-5-67890-1',
    account_name: 'DOGLC DIGITAL WALLET',
    branch: '‡∏™‡∏¢‡∏≤‡∏°',
    status: 'ACTIVE',
    daily_limit: 800000,
    monthly_limit: 25000000,
    current_daily_usage: 156000,
    current_monthly_usage: 3890000,
    created_date: '2025-08-01',
    last_used: '2025-09-19',
    total_received: 89000000,
    transaction_count: 1789
  },
  {
    id: 'bank_003',
    bank_code: 'BBL',
    bank_name: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û',
    account_number: '345-6-78901-2',
    account_name: 'DOGLC DIGITAL WALLET',
    branch: '‡∏≠‡πÇ‡∏®‡∏Å',
    status: 'SUSPENDED',
    daily_limit: 500000,
    monthly_limit: 15000000,
    current_daily_usage: 0,
    current_monthly_usage: 45000,
    created_date: '2025-07-15',
    last_used: '2025-09-15',
    total_received: 25000000,
    transaction_count: 567
  }
];

/**
 * Main bank account management handler
 */
export async function handleBankAccountManagement(ctx, env) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Master Admin ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ');
      return;
    }

    await logUserActivity(ctx.from.id.toString(), {
      action: 'bank_account_management_access',
      admin_level: adminLevel,
      timestamp: new Date().toISOString()
    }, env);

    const bankManagementMessage = `
üè¶ <b>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ - Bank Account Management</b>

üìä <b>‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</b>
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${BANK_ACCOUNTS.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${BANK_ACCOUNTS.filter(acc => acc.status === 'ACTIVE').length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
‚Ä¢ ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å: ${BANK_ACCOUNTS.filter(acc => acc.status === 'SUSPENDED').length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
‚Ä¢ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.current_daily_usage, 0).toLocaleString()} THB

üí∞ <b>‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°:</b>
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ${BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.daily_limit, 0).toLocaleString()} THB
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.current_daily_usage, 0).toLocaleString()} THB
‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${BANK_ACCOUNTS.reduce((sum, acc) => sum + (acc.daily_limit - acc.current_daily_usage), 0).toLocaleString()} THB

‚ö†Ô∏è <b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</b>
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°: ${BANK_ACCOUNTS.filter(acc => (acc.current_daily_usage / acc.daily_limit) > 0.8).length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å: ${BANK_ACCOUNTS.filter(acc => acc.status === 'SUSPENDED').length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ: ${BANK_ACCOUNTS.filter(acc => {
      const lastUsed = new Date(acc.last_used);
      const daysDiff = (new Date() - lastUsed) / (1000 * 60 * 60 * 24);
      return daysDiff > 7;
    }).length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_list_accounts' },
          { text: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà', callback_data: 'bank_add_account' }
        ],
        [
          { text: '‚è∏Ô∏è ‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_suspend_account' },
          { text: '‚ñ∂Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_activate_account' }
        ],
        [
          { text: 'üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_delete_account' },
          { text: '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_edit_account' }
        ],
        [
          { text: 'üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', callback_data: 'bank_usage_stats' },
          { text: '‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'bank_set_limits' }
        ],
        [
          { text: 'üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', callback_data: 'bank_check_transactions' },
          { text: 'üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô', callback_data: 'bank_daily_report' }
        ],
        [
          { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö Admin Panel', callback_data: 'admin_main' }
        ]
      ]
    };

    await ctx.reply(bankManagementMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Bank account management error:', error);
    await ctx.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£');
  }
}

/**
 * List all bank accounts
 */
export async function handleListBankAccounts(ctx, env) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
      return;
    }

    let accountList = 'üè¶ <b>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</b>\n\n';

    BANK_ACCOUNTS.forEach((account, index) => {
      const statusEmoji = account.status === 'ACTIVE' ? 'üü¢' : 'üî¥';
      const usagePercent = ((account.current_daily_usage / account.daily_limit) * 100).toFixed(1);
      
      accountList += `${statusEmoji} <b>${account.bank_name} (${account.bank_code})</b>\n`;
      accountList += `üì± ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: <code>${account.account_number}</code>\n`;
      accountList += `üè¢ ‡∏™‡∏≤‡∏Ç‡∏≤: ${account.branch}\n`;
      accountList += `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${account.status}\n`;
      accountList += `üí∞ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${account.current_daily_usage.toLocaleString()}/${account.daily_limit.toLocaleString()} THB (${usagePercent}%)\n`;
      accountList += `üìÖ ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date(account.last_used).toLocaleDateString('th-TH')}\n`;
      accountList += `üî¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${account.transaction_count.toLocaleString()}\n`;
      accountList += `üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö: ${account.total_received.toLocaleString()} THB\n\n`;
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà', callback_data: 'bank_add_account' },
          { text: '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_edit_account' }
        ],
        [
          { text: '‚è∏Ô∏è ‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_suspend_account' },
          { text: '‚ñ∂Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_activate_account' }
        ],
        [
          { text: 'üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_delete_account' },
          { text: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä', callback_data: 'bank_list_accounts' }
        ],
        [
          { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_management' }
        ]
      ]
    };

    await ctx.reply(accountList, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('List bank accounts error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ');
  }
}

/**
 * Add new bank account
 */
export async function handleAddBankAccount(ctx, env) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
      return;
    }

    const addAccountMessage = `
‚ûï <b>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</b>

üìã <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å:</b>

1Ô∏è‚É£ <b>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:</b>
   ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°

2Ô∏è‚É£ <b>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</b>
   ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£

3Ô∏è‚É£ <b>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</b>
   ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ

4Ô∏è‚É£ <b>‡∏™‡∏≤‡∏Ç‡∏≤:</b>
   ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ

5Ô∏è‚É£ <b>‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô:</b>
   ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

‚ö†Ô∏è <b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</b>
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
    `;

    const bankSelection = {
      inline_keyboard: [
        [
          { text: 'üè¶ ‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ (KBANK)', callback_data: 'bank_add_kbank' },
          { text: 'üè¶ ‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå (SCB)', callback_data: 'bank_add_scb' }
        ],
        [
          { text: 'üè¶ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û (BBL)', callback_data: 'bank_add_bbl' },
          { text: 'üè¶ ‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢ (KTB)', callback_data: 'bank_add_ktb' }
        ],
        [
          { text: 'üè¶ ‡∏ó‡∏µ‡πÄ‡∏≠‡πá‡∏°‡∏ö‡∏µ (TMB)', callback_data: 'bank_add_tmb' },
          { text: 'üè¶ ‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ (BAY)', callback_data: 'bank_add_bay' }
        ],
        [
          { text: 'üè¶ ‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ (UOB)', callback_data: 'bank_add_uob' },
          { text: 'üè¶ ‡∏ã‡∏µ‡πÑ‡∏≠‡πÄ‡∏≠‡πá‡∏°‡∏ö‡∏µ (CIMB)', callback_data: 'bank_add_cimb' }
        ],
        [
          { text: 'üîô ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', callback_data: 'bank_management' }
        ]
      ]
    };

    await ctx.reply(addAccountMessage, {
      reply_markup: bankSelection,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Add bank account error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
  }
}

/**
 * Suspend bank account
 */
export async function handleSuspendBankAccount(ctx, env) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
      return;
    }

    const activeAccounts = BANK_ACCOUNTS.filter(acc => acc.status === 'ACTIVE');
    
    if (activeAccounts.length === 0) {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏±‡∏Å‡πÑ‡∏î‡πâ');
      return;
    }

    const suspendMessage = `
‚è∏Ô∏è <b>‡∏û‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</b>

‚ö†Ô∏è <b>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</b>
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ ‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á

üìã <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å:</b>

${activeAccounts.map((account, index) => {
  const usagePercent = ((account.current_daily_usage / account.daily_limit) * 100).toFixed(1);
  return `${index + 1}. ${account.bank_name} (${account.account_number})
   üí∞ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${usagePercent}% | ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${account.transaction_count}`;
}).join('\n\n')}

üéØ <b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å:</b>
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
‚Ä¢ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    `;

    const keyboard = {
      inline_keyboard: activeAccounts.map((account, index) => [
        { 
          text: `‚è∏Ô∏è ‡∏û‡∏±‡∏Å ${account.bank_name} (${account.bank_code})`, 
          callback_data: `bank_suspend_${account.id}` 
        }
      ]).concat([[
        { text: 'üîô ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', callback_data: 'bank_management' }
      ]])
    };

    await ctx.reply(suspendMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Suspend bank account error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ');
  }
}

/**
 * Activate bank account
 */
export async function handleActivateBankAccount(ctx, env) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
      return;
    }

    const suspendedAccounts = BANK_ACCOUNTS.filter(acc => acc.status === 'SUSPENDED');
    
    if (suspendedAccounts.length === 0) {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å');
      return;
    }

    const activateMessage = `
‚ñ∂Ô∏è <b>‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</b>

‚úÖ <b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</b>
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ

üìã <b>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å:</b>

${suspendedAccounts.map((account, index) => {
  const daysSuspended = Math.floor((new Date() - new Date(account.last_used)) / (1000 * 60 * 60 * 24));
  return `${index + 1}. ${account.bank_name} (${account.account_number})
   üìÖ ‡∏û‡∏±‡∏Å‡∏°‡∏≤: ${daysSuspended} ‡∏ß‡∏±‡∏ô | ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${account.transaction_count}`;
}).join('\n\n')}

üîç <b>‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</b>
‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏±‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
    `;

    const keyboard = {
      inline_keyboard: suspendedAccounts.map((account, index) => [
        { 
          text: `‚ñ∂Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î ${account.bank_name} (${account.bank_code})`, 
          callback_data: `bank_activate_${account.id}` 
        }
      ]).concat([[
        { text: 'üîô ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', callback_data: 'bank_management' }
      ]])
    };

    await ctx.reply(activateMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Activate bank account error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ');
  }
}

/**
 * Delete bank account
 */
export async function handleDeleteBankAccount(ctx, env) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel !== 'SUPER_ADMIN') {
      await ctx.reply('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Super Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    const deleteMessage = `
üóëÔ∏è <b>‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</b>

‚ö†Ô∏è <b>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</b>
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Super Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

üîê <b>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏•‡∏ö:</b>
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "SUSPENDED"
‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
‚Ä¢ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß

üìã <b>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ:</b>

${BANK_ACCOUNTS.filter(acc => acc.status === 'SUSPENDED').map((account, index) => {
  return `${index + 1}. ${account.bank_name} (${account.account_number})
   üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${account.transaction_count}
   üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${account.total_received.toLocaleString()} THB`;
}).join('\n\n')}

‚ùå <b>‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ:</b>
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡∏Å
    `;

    const suspendedAccounts = BANK_ACCOUNTS.filter(acc => acc.status === 'SUSPENDED');
    
    if (suspendedAccounts.length === 0) {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô)');
      return;
    }

    const keyboard = {
      inline_keyboard: suspendedAccounts.map((account, index) => [
        { 
          text: `üóëÔ∏è ‡∏•‡∏ö ${account.bank_name} (${account.bank_code})`, 
          callback_data: `bank_delete_${account.id}` 
        }
      ]).concat([[
        { text: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', callback_data: 'bank_management' }
      ]])
    };

    await ctx.reply(deleteMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Delete bank account error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ');
  }
}

/**
 * Bank usage statistics
 */
export async function handleBankUsageStats(ctx, env) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
      return;
    }

    const totalDailyLimit = BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.daily_limit, 0);
    const totalDailyUsage = BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.current_daily_usage, 0);
    const totalMonthlyLimit = BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.monthly_limit, 0);
    const totalMonthlyUsage = BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.current_monthly_usage, 0);
    const totalTransactions = BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.transaction_count, 0);
    const totalReceived = BANK_ACCOUNTS.reduce((sum, acc) => sum + acc.total_received, 0);

    const statsMessage = `
üìä <b>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</b>

üí∞ <b>‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô:</b>
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°: ${totalDailyLimit.toLocaleString()} THB
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${totalDailyUsage.toLocaleString()} THB (${((totalDailyUsage/totalDailyLimit)*100).toFixed(1)}%)
‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${(totalDailyLimit - totalDailyUsage).toLocaleString()} THB

üìà <b>‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</b>
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°: ${totalMonthlyLimit.toLocaleString()} THB
‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${totalMonthlyUsage.toLocaleString()} THB (${((totalMonthlyUsage/totalMonthlyLimit)*100).toFixed(1)}%)
‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${(totalMonthlyLimit - totalMonthlyUsage).toLocaleString()} THB

üìã <b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</b>

${BANK_ACCOUNTS.map((account, index) => {
  const dailyPercent = ((account.current_daily_usage / account.daily_limit) * 100).toFixed(1);
  const monthlyPercent = ((account.current_monthly_usage / account.monthly_limit) * 100).toFixed(1);
  const statusEmoji = account.status === 'ACTIVE' ? 'üü¢' : 'üî¥';
  
  return `${statusEmoji} <b>${account.bank_name}</b>
üí∞ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${account.current_daily_usage.toLocaleString()}/${account.daily_limit.toLocaleString()} (${dailyPercent}%)
üìä ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ${account.current_monthly_usage.toLocaleString()}/${account.monthly_limit.toLocaleString()} (${monthlyPercent}%)
üî¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${account.transaction_count.toLocaleString()}`;
}).join('\n\n')}

üèÜ <b>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:</b>
‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalTransactions.toLocaleString()}
‚Ä¢ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö: ${totalReceived.toLocaleString()} THB
‚Ä¢ ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${(totalReceived/totalTransactions).toFixed(0)} THB
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${BANK_ACCOUNTS.filter(acc => acc.status === 'ACTIVE').length}/${BANK_ACCOUNTS.length}
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô', callback_data: 'bank_daily_report' },
          { text: 'üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', callback_data: 'bank_monthly_report' }
        ],
        [
          { text: '‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô', callback_data: 'bank_set_limits' },
          { text: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', callback_data: 'bank_reset_daily' }
        ],
        [
          { text: 'üì• Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', callback_data: 'bank_export_data' },
          { text: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä', callback_data: 'bank_usage_stats' }
        ],
        [
          { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_management' }
        ]
      ]
    };

    await ctx.reply(statsMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Bank usage stats error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ');
  }
}

/**
 * Handle specific bank account suspend action
 */
export async function handleBankAccountSuspend(ctx, env, bankId) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
      return;
    }

    const account = BANK_ACCOUNTS.find(acc => acc.id === bankId);
    if (!account) {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return;
    }

    if (account.status === 'SUSPENDED') {
      await ctx.reply('‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    // Update account status
    account.status = 'SUSPENDED';
    account.suspended_date = new Date().toISOString();
    account.suspended_by = ctx.from.id.toString();

    await logUserActivity(ctx.from.id.toString(), {
      action: 'bank_account_suspended',
      bank_id: bankId,
      bank_name: account.bank_name,
      account_number: account.account_number,
      admin_level: adminLevel
    }, env);

    const confirmMessage = `
‚úÖ <b>‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</b>

üè¶ <b>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å:</b>
‚Ä¢ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${account.bank_name}
‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${account.account_number}
‚Ä¢ ‡∏™‡∏≤‡∏Ç‡∏≤: ${account.branch}

‚è∞ <b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b>
‚Ä¢ ‡∏û‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}
‚Ä¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: ${ctx.from.first_name}
‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: üî¥ SUSPENDED

‚ö†Ô∏è <b>‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö:</b>
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ
‚Ä¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ñ∂Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', callback_data: `bank_activate_${bankId}` },
          { text: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_list_accounts' }
        ],
        [
          { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_management' }
        ]
      ]
    };

    await ctx.reply(confirmMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Bank account suspend error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ');
  }
}

/**
 * Handle specific bank account activate action
 */
export async function handleBankAccountActivate(ctx, env, bankId) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel === 'ADMIN') {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
      return;
    }

    const account = BANK_ACCOUNTS.find(acc => acc.id === bankId);
    if (!account) {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return;
    }

    if (account.status === 'ACTIVE') {
      await ctx.reply('‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    // Update account status
    account.status = 'ACTIVE';
    account.activated_date = new Date().toISOString();
    account.activated_by = ctx.from.id.toString();

    await logUserActivity(ctx.from.id.toString(), {
      action: 'bank_account_activated',
      bank_id: bankId,
      bank_name: account.bank_name,
      account_number: account.account_number,
      admin_level: adminLevel
    }, env);

    const confirmMessage = `
‚úÖ <b>‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</b>

üè¶ <b>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ:</b>
‚Ä¢ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${account.bank_name}
‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${account.account_number}
‚Ä¢ ‡∏™‡∏≤‡∏Ç‡∏≤: ${account.branch}

‚è∞ <b>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</b>
‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}
‚Ä¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: ${ctx.from.first_name}
‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: üü¢ ACTIVE

‚úÖ <b>‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö:</b>
‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ
‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô: ${account.daily_limit.toLocaleString()} THB/‡∏ß‡∏±‡∏ô
‚Ä¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚è∏Ô∏è ‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', callback_data: `bank_suspend_${bankId}` },
          { text: 'üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_list_accounts' }
        ],
        [
          { text: 'üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', callback_data: 'bank_usage_stats' },
          { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', callback_data: 'bank_management' }
        ]
      ]
    };

    await ctx.reply(confirmMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Bank account activate error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ');
  }
}

/**
 * Handle specific bank account delete action
 */
export async function handleBankAccountDelete(ctx, env, bankId) {
  try {
    const adminLevel = checkAdminLevel(ctx.from.id);
    if (!adminLevel || adminLevel !== 'SUPER_ADMIN') {
      await ctx.reply('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Super Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    const account = BANK_ACCOUNTS.find(acc => acc.id === bankId);
    if (!account) {
      await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
      return;
    }

    if (account.status !== 'SUSPENDED') {
      await ctx.reply('‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö');
      return;
    }

    const confirmMessage = `
‚ö†Ô∏è <b>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</b>

üè¶ <b>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:</b>
‚Ä¢ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: ${account.bank_name}
‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${account.account_number}
‚Ä¢ ‡∏™‡∏≤‡∏Ç‡∏≤: ${account.branch}

üìä <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:</b>
‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${account.transaction_count.toLocaleString()}
‚Ä¢ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö: ${account.total_received.toLocaleString()} THB
‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà: ${new Date(account.created_date).toLocaleDateString('th-TH')}

‚ùå <b>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:</b>
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ
‚Ä¢ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡∏Å

üîê <b>‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:</b>
‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Super Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö', callback_data: `bank_confirm_delete_${bankId}` }
        ],
        [
          { text: 'üõ°Ô∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', callback_data: 'bank_management' }
        ]
      ]
    };

    await ctx.reply(confirmMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Bank account delete error:', error);
    await ctx.reply('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ');
  }
}

// Helper function - should be imported from admin.js
function checkAdminLevel(userId) {
  const userIdStr = userId.toString();
  const ADMIN_CONFIG = {
    SUPER_ADMIN_ID: '100200300',
    MASTER_ADMINS: ['123456789', '987654321'], 
    ADMINS: ['111222333', '444555666']
  };
  
  if (ADMIN_CONFIG.SUPER_ADMIN_ID === userIdStr) {
    return 'SUPER_ADMIN';
  } else if (ADMIN_CONFIG.MASTER_ADMINS.includes(userIdStr)) {
    return 'MASTER_ADMIN';
  } else if (ADMIN_CONFIG.ADMINS.includes(userIdStr)) {
    return 'ADMIN';
  }
  
  return null;
}