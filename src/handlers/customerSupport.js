/**
 * Customer Support System for Digital Wallet
 * Live chat, ticket system, FAQ bot, and support automation
 */

import { generateSecureToken } from './encryption.js';
import { logSecurityEvent, SECURITY_EVENT_TYPES, SEVERITY_LEVELS } from './security-logger.js';
import { logUserActivity } from './helpers.js';

/**
 * Support System Configuration
 */
export const SUPPORT_CONFIG = {
  // Support Channels
  CHANNELS: {
    LIVE_CHAT: 'live_chat',
    TICKET: 'ticket',
    FAQ_BOT: 'faq_bot',
    EMAIL: 'email',
    PHONE: 'phone'
  },
  
  // Priority Levels
  PRIORITY: {
    LOW: 'LOW',
    MEDIUM: 'MEDIUM',
    HIGH: 'HIGH',
    URGENT: 'URGENT',
    CRITICAL: 'CRITICAL'
  },
  
  // Support Categories
  CATEGORIES: {
    ACCOUNT: 'account_issues',
    TRANSACTION: 'transaction_issues',
    DEPOSIT: 'deposit_issues',
    WITHDRAWAL: 'withdrawal_issues',
    SECURITY: 'security_issues',
    TECHNICAL: 'technical_issues',
    BILLING: 'billing_issues',
    GENERAL: 'general_inquiry'
  },
  
  // Response Time SLA (in minutes)
  SLA: {
    CRITICAL: 15,
    URGENT: 30,
    HIGH: 60,
    MEDIUM: 240,
    LOW: 480
  },
  
  // Languages
  LANGUAGES: ['th', 'en', 'zh', 'ko', 'id', 'km'],
  
  // Operating Hours
  OPERATING_HOURS: {
    start: 8,  // 8 AM
    end: 22,   // 10 PM
    timezone: 'Asia/Bangkok'
  }
};

/**
 * Support Ticket System
 */
export class SupportTicketSystem {
  
  static tickets = new Map(); // In production, use database
  static ticketCounter = 1000;
  
  /**
   * Create new support ticket
   */
  static async createTicket({
    userId,
    category,
    priority = SUPPORT_CONFIG.PRIORITY.MEDIUM,
    subject,
    description,
    language = 'th',
    attachments = [],
    metadata = {}
  }) {
    try {
      const ticketId = this.generateTicketId();
      
      const ticket = {
        ticketId,
        userId,
        category,
        priority,
        subject,
        description,
        language,
        status: 'OPEN',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        assignedTo: null,
        attachments,
        metadata,
        messages: [],
        tags: [],
        satisfaction: null,
        resolvedAt: null,
        responseTime: null,
        slaBreached: false
      };
      
      // Auto-assign based on category
      ticket.assignedTo = await this.autoAssignTicket(category, priority);
      
      // Calculate SLA deadline
      ticket.slaDeadline = this.calculateSLADeadline(priority);
      
      // Store ticket
      this.tickets.set(ticketId, ticket);
      
      // Log ticket creation
      await logSecurityEvent({
        type: 'SUPPORT_TICKET_CREATED',
        userId,
        severity: SEVERITY_LEVELS.LOW,
        description: `Support ticket created: ${subject}`,
        metadata: {
          ticketId,
          category,
          priority,
          subject
        }
      });
      
      // Send confirmation to user
      await this.sendTicketConfirmation(ticket);
      
      // Notify assigned agent
      if (ticket.assignedTo) {
        await this.notifyAgent(ticket.assignedTo, ticket);
      }
      
      console.log(`üé´ Ticket created: ${ticketId} (${category}/${priority})`);
      
      return ticket;
      
    } catch (error) {
      console.error('Create ticket error:', error);
      throw error;
    }
  }
  
  /**
   * Add message to ticket
   */
  static async addMessage(ticketId, senderId, senderType, message, attachments = []) {
    try {
      const ticket = this.tickets.get(ticketId);
      if (!ticket) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô');
      }
      
      const messageId = generateSecureToken(8);
      const messageObj = {
        messageId,
        senderId,
        senderType, // 'USER' or 'AGENT'
        message,
        attachments,
        timestamp: new Date().toISOString(),
        edited: false
      };
      
      ticket.messages.push(messageObj);
      ticket.updatedAt = new Date().toISOString();
      
      // If first agent response, calculate response time
      if (senderType === 'AGENT' && !ticket.responseTime) {
        const responseTime = Date.now() - new Date(ticket.createdAt).getTime();
        ticket.responseTime = responseTime;
        
        // Check if SLA was breached
        const slaLimit = SUPPORT_CONFIG.SLA[ticket.priority] * 60 * 1000;
        if (responseTime > slaLimit) {
          ticket.slaBreached = true;
          await this.handleSLABreach(ticket);
        }
      }
      
      // Update ticket status if user responds to resolved ticket
      if (senderType === 'USER' && ticket.status === 'RESOLVED') {
        ticket.status = 'REOPENED';
        await this.notifyAgent(ticket.assignedTo, ticket, 'REOPENED');
      }
      
      this.tickets.set(ticketId, ticket);
      
      // Notify other party
      if (senderType === 'USER' && ticket.assignedTo) {
        await this.notifyAgent(ticket.assignedTo, ticket, 'NEW_MESSAGE');
      } else if (senderType === 'AGENT') {
        await this.notifyUser(ticket.userId, ticket, 'NEW_MESSAGE');
      }
      
      return messageObj;
      
    } catch (error) {
      console.error('Add message error:', error);
      throw error;
    }
  }
  
  /**
   * Update ticket status
   */
  static async updateTicketStatus(ticketId, status, agentId = null, resolution = null) {
    try {
      const ticket = this.tickets.get(ticketId);
      if (!ticket) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô');
      }
      
      const oldStatus = ticket.status;
      ticket.status = status;
      ticket.updatedAt = new Date().toISOString();
      
      if (status === 'RESOLVED' || status === 'CLOSED') {
        ticket.resolvedAt = new Date().toISOString();
        ticket.resolvedBy = agentId;
        ticket.resolution = resolution;
        
        // Send satisfaction survey
        await this.sendSatisfactionSurvey(ticket);
      }
      
      this.tickets.set(ticketId, ticket);
      
      // Log status change
      await logSecurityEvent({
        type: 'SUPPORT_TICKET_UPDATED',
        userId: ticket.userId,
        severity: SEVERITY_LEVELS.LOW,
        description: `Ticket ${ticketId} status changed: ${oldStatus} ‚Üí ${status}`,
        metadata: {
          ticketId,
          oldStatus,
          newStatus: status,
          agentId
        }
      });
      
      // Notify user
      await this.notifyUser(ticket.userId, ticket, 'STATUS_UPDATED');
      
      return ticket;
      
    } catch (error) {
      console.error('Update ticket status error:', error);
      throw error;
    }
  }
  
  /**
   * Get user tickets
   */
  static async getUserTickets(userId, status = null, limit = 10) {
    try {
      let userTickets = Array.from(this.tickets.values())
        .filter(ticket => ticket.userId === userId);
      
      if (status) {
        userTickets = userTickets.filter(ticket => ticket.status === status);
      }
      
      // Sort by creation date (newest first)
      userTickets.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      // Limit results
      return userTickets.slice(0, limit);
      
    } catch (error) {
      console.error('Get user tickets error:', error);
      return [];
    }
  }
  
  /**
   * Generate ticket ID
   */
  static generateTicketId() {
    return `TK${String(this.ticketCounter++).padStart(6, '0')}`;
  }
  
  /**
   * Calculate SLA deadline
   */
  static calculateSLADeadline(priority) {
    const slaMinutes = SUPPORT_CONFIG.SLA[priority];
    return new Date(Date.now() + slaMinutes * 60 * 1000).toISOString();
  }
  
  /**
   * Auto-assign ticket to agent
   */
  static async autoAssignTicket(category, priority) {
    // Implement agent assignment logic
    // For now, return mock agent based on category
    const agents = {
      [SUPPORT_CONFIG.CATEGORIES.SECURITY]: 'agent_security_001',
      [SUPPORT_CONFIG.CATEGORIES.TRANSACTION]: 'agent_finance_001',
      [SUPPORT_CONFIG.CATEGORIES.TECHNICAL]: 'agent_tech_001'
    };
    
    return agents[category] || 'agent_general_001';
  }
  
  /**
   * Handle SLA breach
   */
  static async handleSLABreach(ticket) {
    console.warn(`‚ö†Ô∏è SLA breached for ticket ${ticket.ticketId}`);
    
    await logSecurityEvent({
      type: 'SUPPORT_SLA_BREACHED',
      userId: ticket.userId,
      severity: SEVERITY_LEVELS.MEDIUM,
      description: `SLA breached for ticket ${ticket.ticketId}`,
      metadata: {
        ticketId: ticket.ticketId,
        priority: ticket.priority,
        responseTime: ticket.responseTime,
        slaLimit: SUPPORT_CONFIG.SLA[ticket.priority] * 60 * 1000
      }
    });
    
    // Escalate to supervisor
    await this.escalateTicket(ticket.ticketId, 'SLA_BREACH');
  }
  
  /**
   * Escalate ticket
   */
  static async escalateTicket(ticketId, reason) {
    const ticket = this.tickets.get(ticketId);
    if (!ticket) return;
    
    // Increase priority
    const priorities = Object.values(SUPPORT_CONFIG.PRIORITY);
    const currentIndex = priorities.indexOf(ticket.priority);
    if (currentIndex < priorities.length - 1) {
      ticket.priority = priorities[currentIndex + 1];
    }
    
    // Reassign to supervisor
    ticket.assignedTo = 'supervisor_001';
    ticket.tags.push('ESCALATED');
    
    this.tickets.set(ticketId, ticket);
    
    console.log(`üìà Ticket ${ticketId} escalated (${reason})`);
  }
  
  /**
   * Send notifications (implement with your notification system)
   */
  static async sendTicketConfirmation(ticket) {
    // Send confirmation message to user
    console.log(`üìß Ticket confirmation sent to user ${ticket.userId}`);
  }
  
  static async notifyAgent(agentId, ticket, type = 'NEW_TICKET') {
    // Notify agent of new/updated ticket
    console.log(`üîî Agent ${agentId} notified: ${type} - ${ticket.ticketId}`);
  }
  
  static async notifyUser(userId, ticket, type = 'UPDATE') {
    // Notify user of ticket update
    console.log(`üì± User ${userId} notified: ${type} - ${ticket.ticketId}`);
  }
  
  static async sendSatisfactionSurvey(ticket) {
    // Send satisfaction survey to user
    console.log(`üìä Satisfaction survey sent for ticket ${ticket.ticketId}`);
  }
}

/**
 * Live Chat System
 */
export class LiveChatSystem {
  
  static chatSessions = new Map();
  static agents = new Map();
  static waitingQueue = [];
  
  /**
   * Start live chat session
   */
  static async startChatSession(userId, language = 'th', category = 'general') {
    try {
      // Check if user already has active session
      const existingSession = this.getActiveSession(userId);
      if (existingSession) {
        return existingSession;
      }
      
      const sessionId = generateSecureToken(12);
      
      const session = {
        sessionId,
        userId,
        language,
        category,
        status: 'WAITING',
        createdAt: new Date().toISOString(),
        connectedAt: null,
        endedAt: null,
        agentId: null,
        messages: [],
        waitTime: null,
        satisfaction: null
      };
      
      // Find available agent
      const availableAgent = await this.findAvailableAgent(category, language);
      
      if (availableAgent) {
        session.agentId = availableAgent.agentId;
        session.status = 'CONNECTED';
        session.connectedAt = new Date().toISOString();
        session.waitTime = 0;
        
        // Mark agent as busy
        availableAgent.status = 'BUSY';
        availableAgent.currentSession = sessionId;
        this.agents.set(availableAgent.agentId, availableAgent);
        
      } else {
        // Add to waiting queue
        this.waitingQueue.push(sessionId);
        await this.notifyUserInQueue(userId, this.waitingQueue.length);
      }
      
      this.chatSessions.set(sessionId, session);
      
      await logSecurityEvent({
        type: 'LIVE_CHAT_STARTED',
        userId,
        severity: SEVERITY_LEVELS.LOW,
        description: 'Live chat session started',
        metadata: {
          sessionId,
          category,
          language,
          agentId: session.agentId
        }
      });
      
      return session;
      
    } catch (error) {
      console.error('Start chat session error:', error);
      throw error;
    }
  }
  
  /**
   * Send chat message
   */
  static async sendChatMessage(sessionId, senderId, senderType, message) {
    try {
      const session = this.chatSessions.get(sessionId);
      if (!session) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏ä‡∏ó');
      }
      
      if (session.status !== 'CONNECTED') {
        throw new Error('‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏ä‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
      }
      
      const messageObj = {
        messageId: generateSecureToken(8),
        senderId,
        senderType,
        message,
        timestamp: new Date().toISOString()
      };
      
      session.messages.push(messageObj);
      this.chatSessions.set(sessionId, session);
      
      // Notify other party in real-time
      if (senderType === 'USER') {
        await this.notifyAgent(session.agentId, messageObj);
      } else {
        await this.notifyUser(session.userId, messageObj);
      }
      
      return messageObj;
      
    } catch (error) {
      console.error('Send chat message error:', error);
      throw error;
    }
  }
  
  /**
   * End chat session
   */
  static async endChatSession(sessionId, endedBy, reason = 'USER_REQUEST') {
    try {
      const session = this.chatSessions.get(sessionId);
      if (!session) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡πÅ‡∏ä‡∏ó');
      }
      
      session.status = 'ENDED';
      session.endedAt = new Date().toISOString();
      session.endedBy = endedBy;
      session.endReason = reason;
      
      // Free up agent
      if (session.agentId) {
        const agent = this.agents.get(session.agentId);
        if (agent) {
          agent.status = 'AVAILABLE';
          agent.currentSession = null;
          this.agents.set(session.agentId, agent);
          
          // Assign next waiting user
          await this.processWaitingQueue(session.agentId);
        }
      }
      
      this.chatSessions.set(sessionId, session);
      
      // Send satisfaction survey
      await this.sendChatSatisfactionSurvey(session);
      
      await logSecurityEvent({
        type: 'LIVE_CHAT_ENDED',
        userId: session.userId,
        severity: SEVERITY_LEVELS.LOW,
        description: 'Live chat session ended',
        metadata: {
          sessionId,
          duration: Date.now() - new Date(session.createdAt).getTime(),
          messageCount: session.messages.length,
          endedBy,
          reason
        }
      });
      
      return session;
      
    } catch (error) {
      console.error('End chat session error:', error);
      throw error;
    }
  }
  
  /**
   * Helper methods
   */
  static getActiveSession(userId) {
    return Array.from(this.chatSessions.values())
      .find(session => session.userId === userId && ['WAITING', 'CONNECTED'].includes(session.status));
  }
  
  static async findAvailableAgent(category, language) {
    return Array.from(this.agents.values())
      .find(agent => 
        agent.status === 'AVAILABLE' && 
        agent.categories.includes(category) && 
        agent.languages.includes(language)
      );
  }
  
  static async processWaitingQueue(availableAgentId) {
    if (this.waitingQueue.length === 0) return;
    
    const nextSessionId = this.waitingQueue.shift();
    const session = this.chatSessions.get(nextSessionId);
    
    if (session && session.status === 'WAITING') {
      const agent = this.agents.get(availableAgentId);
      
      session.agentId = availableAgentId;
      session.status = 'CONNECTED';
      session.connectedAt = new Date().toISOString();
      session.waitTime = Date.now() - new Date(session.createdAt).getTime();
      
      agent.status = 'BUSY';
      agent.currentSession = nextSessionId;
      
      this.chatSessions.set(nextSessionId, session);
      this.agents.set(availableAgentId, agent);
      
      // Notify user they're connected
      await this.notifyUserConnected(session.userId, session.agentId);
    }
  }
  
  static async notifyUserInQueue(userId, position) {
    console.log(`üìû User ${userId} in queue position ${position}`);
  }
  
  static async notifyUserConnected(userId, agentId) {
    console.log(`‚úÖ User ${userId} connected to agent ${agentId}`);
  }
  
  static async notifyAgent(agentId, message) {
    console.log(`üí¨ Agent ${agentId} received message`);
  }
  
  static async notifyUser(userId, message) {
    console.log(`üí¨ User ${userId} received message`);
  }
  
  static async sendChatSatisfactionSurvey(session) {
    console.log(`üìä Chat satisfaction survey sent for session ${session.sessionId}`);
  }
}

/**
 * FAQ Bot System
 */
export class FAQBotSystem {
  
  static faqDatabase = {
    // Account Related
    'account_login': {
      question: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ',
      answer: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n1. ‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n2. ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥\n3. ‡∏•‡∏≠‡∏á‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ\n\n‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô',
      category: 'account',
      keywords: ['‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', 'login', '‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô']
    },
    'account_2fa': {
      question: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 2FA',
      answer: '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ 2FA:\n1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n3. ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 2FA\n4. ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á\n5. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™ OTP',
      category: 'security',
      keywords: ['2fa', 'two factor', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', 'otp']
    },
    
    // Transaction Related
    'deposit_thb': {
      question: '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó',
      answer: '‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó:\n1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô\n2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\n3. ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n4. ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ\n5. ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ 1-5 ‡∏ô‡∏≤‡∏ó‡∏µ',
      category: 'deposit',
      keywords: ['‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô', 'deposit', '‡∏ö‡∏≤‡∏ó', 'thb', '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô']
    },
    'withdraw_usdt': {
      question: '‡∏ß‡∏¥‡∏ò‡∏µ‡∏ñ‡∏≠‡∏ô USDT',
      answer: '‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô USDT:\n1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô\n2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å USDT\n3. ‡πÉ‡∏™‡πà Wallet Address\n4. ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô\n5. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 2FA\n6. ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• 10-30 ‡∏ô‡∏≤‡∏ó‡∏µ',
      category: 'withdrawal',
      keywords: ['‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', 'withdraw', 'usdt', 'wallet', 'address']
    },
    
    // Fees and Limits
    'fees_commission': {
      question: '‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô',
      answer: '‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°:\n‚Ä¢ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ü‡∏£‡∏µ\n‚Ä¢ ‡∏ñ‡∏≠‡∏ô USDT: 1 USDT\n‚Ä¢ ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: 0.1%\n‚Ä¢ VIP ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 10-50%\n\n‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°',
      category: 'billing',
      keywords: ['‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°', 'fee', 'commission', '‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô', '‡∏£‡∏≤‡∏Ñ‡∏≤']
    },
    
    // Technical Issues
    'app_slow': {
      question: '‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤',
      answer: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏≠‡∏õ‡∏ä‡πâ‡∏≤:\n1. ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\n3. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n4. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏≠‡∏õ\n5. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
      category: 'technical',
      keywords: ['‡∏ä‡πâ‡∏≤', 'slow', 'lag', '‡∏Ñ‡πâ‡∏≤‡∏á', '‡πÅ‡∏≠‡∏õ', 'app']
    }
  };
  
  /**
   * Search FAQ
   */
  static searchFAQ(query, language = 'th') {
    const normalizedQuery = query.toLowerCase();
    const results = [];
    
    for (const [id, faq] of Object.entries(this.faqDatabase)) {
      // Check keywords match
      const keywordMatch = faq.keywords.some(keyword => 
        normalizedQuery.includes(keyword.toLowerCase())
      );
      
      // Check question content match
      const questionMatch = faq.question.toLowerCase().includes(normalizedQuery);
      
      if (keywordMatch || questionMatch) {
        results.push({
          id,
          ...faq,
          relevance: keywordMatch ? 1 : 0.5
        });
      }
    }
    
    // Sort by relevance
    results.sort((a, b) => b.relevance - a.relevance);
    
    return results.slice(0, 5); // Return top 5 results
  }
  
  /**
   * Get FAQ by category
   */
  static getFAQByCategory(category) {
    return Object.entries(this.faqDatabase)
      .filter(([id, faq]) => faq.category === category)
      .map(([id, faq]) => ({ id, ...faq }));
  }
  
  /**
   * Process user query with NLP-like matching
   */
  static async processQuery(query, userId) {
    try {
      // Log query for analytics
      await logUserActivity(userId, {
        action: 'faq_query',
        query,
        timestamp: new Date().toISOString()
      });
      
      // Search FAQ
      const results = this.searchFAQ(query);
      
      if (results.length === 0) {
        return {
          type: 'NO_MATCH',
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô',
          suggestions: [
            '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô',
            '‡∏î‡∏π‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°',
            '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà'
          ]
        };
      }
      
      return {
        type: 'FAQ_RESULTS',
        results,
        message: results.length === 1 ? 
          '‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:' : 
          `‡∏û‡∏ö ${results.length} ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:`
      };
      
    } catch (error) {
      console.error('Process FAQ query error:', error);
      return {
        type: 'ERROR',
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      };
    }
  }
}

/**
 * Support handler for Telegram bot
 */
export async function handleSupport(ctx, env) {
  try {
    const userId = ctx.from.id.toString();
    
    const supportMessage = `
üÜò <b>‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - Customer Support</b>

üìû <b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</b>

üí¨ <b>‡πÅ‡∏ä‡∏ó‡∏™‡∏î</b> - ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 08:00 - 22:00 ‡∏ô.
üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: 2-5 ‡∏ô‡∏≤‡∏ó‡∏µ

üé´ <b>‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô</b> - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
üìù ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° 24/7
‚è±Ô∏è ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1-4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

ü§ñ <b>FAQ ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</b> - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πà‡∏ß‡∏ô
‚ö° ‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ 24/7
üìö ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° + ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

üìß <b>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</b> - support@doglc-wallet.com
‚òéÔ∏è <b>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</b> - 02-XXX-XXXX

üåê <b>‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:</b>
üáπüá≠ ‡πÑ‡∏ó‡∏¢ | üá∫üá∏ English | üá®üá≥ ‰∏≠Êñá | üá∞üá∑ ÌïúÍµ≠Ïñ¥ | üáÆüá© Indonesia | üá∞üá≠ ·ûÅ·üí·ûò·üÇ·ûö
    `;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üí¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡∏™‡∏î', callback_data: 'start_live_chat' },
          { text: 'üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô', callback_data: 'create_support_ticket' }
        ],
        [
          { text: 'ü§ñ FAQ ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', callback_data: 'faq_bot' },
          { text: 'üìö ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°', callback_data: 'popular_faq' }
        ],
        [
          { text: 'üìã ‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô', callback_data: 'my_tickets' },
          { text: 'üí¨ ‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô', callback_data: 'my_chats' }
        ],
        [
          { text: 'üìû ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', callback_data: 'contact_info' },
          { text: 'üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å', callback_data: 'main_menu' }
        ]
      ]
    };

    await ctx.reply(supportMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

    await logUserActivity(userId, {
      action: 'support_menu_accessed',
      timestamp: new Date().toISOString()
    }, env);

  } catch (error) {
    console.error('Support handler error:', error);
    await ctx.reply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô');
  }
}

export default {
  SUPPORT_CONFIG,
  SupportTicketSystem,
  LiveChatSystem,
  FAQBotSystem,
  handleSupport
};